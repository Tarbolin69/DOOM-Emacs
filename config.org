#+TITLE: La Configuración de DOOM Emacs de Tarbolin69
#+PROPERTY: header-args :tangle config.el

[[https://github.com/doomemacs/doomemacs][-> Instrucciones para instalar DOOM Emacs <-]]

GNU Emacs, también conocido como el Monstruo del Dr. Stallman, es un editor de texto GUI (contrario a Vim, que es CLI (a menos que uses GVIM, en cuyo caso tendrías que matarte)). A diferencia de otros editores GUI como VS Code o uno de 50 IDEs de JetBrains, es mucho, MUCHO menos pesado, permite mucha mas configuración, y contiene cosas como:

+ Un gestor de archivos
+ Diferentes terminales nativas
+ Opciones gráficas (es un GUI)
+ Agregador de noticias (RSS)
+ Gestor de EMAIL
+ Reproductor de musica
+ Navegador Web

Entro otras muchas. Técnicamente, podrías usar SOLAMENTE Emacs como tu Gestor de Ventanas (WM), y no te faltaría nada. ¿Significa esto que Emacs es el mejor editor de código? Ni en pedo. Si, hablando objetivamente es el mas completo al ser básicamente un sistema operativo, pero yo, por lo menos, sigo usando primariamente Vim—es mas útil para las cosas que YO hago. Pero, esto no significa que Emacs no sea bueno. Tiene muchas cosas piola como org-mode, que es lo que yo uso para tomar notas y hacer "README"s como este usando la opción ":tangle" que tiene. Tiene buen soporte de auto-completado para código. Permite crear paginas HTML a partir de documentos org, y así. En todo honestidad, también se ve mejor que Vim (y yo, por supuesto, soy muy vanidoso ¯\_(ツ)_/¯ ).

Doom EMACS, que es lo que uso yo, es básicamente un GNU Emacs pre-configurado con cosas que uno ya de por si usaría. Corre rápido, bastante rápido, y tiene las combinaciones de teclas de Vim (nadie usa las de Emacs, lo siento pero son malísimas). Es mejor de usar Emacs solo? Para mi si, ya que no tengo muchas ganas de pasarme los próximos 20 años para tener una configuración de Emacs parecida a esta. ¿Quiero entonces decir que no uses Emacs solo? No. Crear tu propio Emacs desde cero es una muy buena experiencia y practica, aparte de que permite tener solamente lo que quieras y necesites. Quizá te caen mal varias de las cosas de DOOM Emacs, y estas deconstruyendolo mas que construyéndolo—en ese caso, quizá seria mejor empezar en blanco. Yo solamente soy medio vago, y me gusta lo que DOOM Emacs trae.

* TABLA DE CONTENIDOS :toc:
- [[#lenguaje][LENGUAJE]]
- [[#prefacio][PREFACIO]]
- [[#beacon][BEACON]]
- [[#marcadores-y-buffers][MARCADORES Y BUFFERS]]
  - [[#marcadores][Marcadores]]
  - [[#buffers][Buffers]]
  - [[#combinaciones-de-teclas-dentro-del-modo-ibuffer][Combinaciones de Teclas Dentro del Modo Ibuffer]]
- [[#pestañas][PESTAÑAS]]
- [[#clippy][CLIPPY]]
- [[#tablero][TABLERO]]
  - [[#configuración-del-tablero][Configuración del Tablero]]
  - [[#tablero-en-emacsclient][Tablero en Emacsclient]]
- [[#dired][DIRED]]
  - [[#combinación-de-teclas-para-abrir-dired][Combinación de Teclas para Abrir Dired]]
  - [[#combinaciones-de-teclas-dentro-de-dired][Combinaciones de Teclas Dentro de Dired]]
  - [[#combinaciones-de-teclado-con-pee-dired-activado][Combinaciones de Teclado con Pee-Dired Activado]]
- [[#temas-doom][TEMAS DOOM]]
- [[#emojis][EMOJIS]]
- [[#evaluar-expresiones-elisp][EVALUAR EXPRESIONES ELISP]]
- [[#tipo-de-fuente-tipográfica][TIPO DE FUENTE TIPOGRÁFICA]]
- [[#insertar-fecha][INSERTAR FECHA]]
- [[#ivy][IVY]]
  - [[#ivy-posframe][IVY-POSFRAME]]
  - [[#ivy-keybindings][IVY KEYBINDINGS]]
- [[#confugracion-de-lineas][CONFUGRACION DE LINEAS]]
- [[#minimapa][MINIMAPA]]
- [[#linea-de-modos][LINEA DE MODOS]]
- [[#soporte-para-raton][SOPORTE PARA RATON]]
- [[#neotree][NEOTREE]]
- [[#abrir-archivos-especificos][ABRIR ARCHIVOS ESPECIFICOS]]
- [[#modo-org][MODO ORG]]
  - [[#org-export][Org-export]]
  - [[#org-journal][Org-journal]]
  - [[#org-auto-tangle][Org-auto-tangle]]
- [[#modo-arcoiris][MODO ARCOIRIS]]
- [[#registros][REGISTROS]]
- [[#shells][SHELLS]]
- [[#splits][SPLITS]]
- [[#modo-winner][MODO WINNER]]
- [[#zap-to-char][ZAP-TO-CHAR]]

* LENGUAJE
Esto es para decirle a flyspell, el auto-corrector usado acá, que use el diccionario español.
#+begin_src emacs-lisp
(ispell-change-dictionary "espanol" t)
#+end_src

* PREFACIO
Esta configuración asume que usas también mi "init.el" y "packages.el", o si no, algunas (muchas) cosas no van a andar. Si no los vas a usar, al menos fíjate que tengas activados y/o instalados los paquetes y otras necesidades relacionadas a esta configuración. Cuando quieras editar config.el, editas (o añadí) este documento, config.org. Los cambios se van a guardar automáticamente en config.el cuando salves.

Agradecimientos a Derek Taylor, quien fue la inspiración para esta configuración.

* BEACON
Hace que brille el cursor cuando te mueves para no perderlo. Esto lo hace una variable global.

#+begin_src emacs-lisp
(beacon-mode 1)
#+end_src

* MARCADORES Y BUFFERS

** Marcadores
Con los marcadores, uno puedo poner ciertos artículos en "favoritos" y acceder a ellos cuando quiero (incluso despues de cerrar la sesion actual de Emacs). Y, si esta configurado, aparecen también en el tablero cuando entras a DOOM Emacs

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("b". "buffer")
       :desc "Listar marcadores" "L" #'list-bookmarks
       :desc "Salvar los marcadores actuales al documento de marcadores" "w" #'bookmark-save))
#+end_src

** Buffers
Cuando abrís un archivo, cuando abrís dired, cuando haces casi TODO en Emacs, lo que estas viendo es un buffer. Lo que hace ibuffer es darte una lista de todos tus buffers, asi como tambien las herramientas para navegarlos y filtrarlos.

| COMANDO         | DESCRIPCIÓN             | COMBINACIÓN DE TECLAS |
|-----------------+-------------------------+-----------------------|
| ibuffer         | Lanzar ibuffer          | SPC b i               |
| kill-buffer     | Cerrar el buffer actual | SPC b k               |
| next-buffer     | Ir al buffer siguiente  | SPC b n               |
| previous-buffer | Ir al buffer previo     | SPC b p               |
| save-buffer     | Guardar buffer actual   | SPC b s               |

** Combinaciones de Teclas Dentro del Modo Ibuffer
| COMANDO                           | DESCRIPCIÓN                                 | COMBINACIÓN DE TECLAS |
|-----------------------------------+---------------------------------------------+-----------------------|
| ibuffer-mark-forward              | Marcar el buffer                            | m                     |
| ibuffer-unmark-forward            | Desmarcar el buffer                         | u                     |
| ibuffer-do-kill-on-deletion-marks | Cerrar los buffer marcados                  | x                     |
| ibuffer-filter-by-content         | Ibuffer filtro por contenido                | f c                   |
| ibuffer-filter-by-directory       | Ibuffer filtro por directorio               | f d                   |
| ibuffer-filter-by-filename        | Ibuffer filtro por nombre (camino completo) | f f                   |
| ibuffer-filter-by-mode            | Ibuffer filtro por modo                     | f m                   |
| ibuffer-filter-by-name            | Ibuffer filtro por nombre                   | f n                   |
| ibuffer-filter-disable            | Deshabilitar filtro de ibuffer               | f x                   |
| ibuffer-do-kill-lines             | Ocultar buffers marcados                    | g h                   |
| ibuffer-update                    | Restaurar buffers ocultos                   | g H                   |

* PESTAÑAS
Para activar las pestañas, descomenta "tabs" en init.el. Básicamente funcionan como las pestañas de un navegador como Chrome, y hacen el editar múltiples documentos un poco mas cómodo. Lo siguiente son algunas combinaciones de teclas para manejar dichas pestañas.

| COMANDO                     | DESCRIPCIÓN                            | COMBINACIÓN DE TECLAS |
|-----------------------------+----------------------------------------+-----------------------|
| centaur-tabs-mode           | /Alternar pestañas globalmente/          | SPC t c               |
| centaur-tabs-local-mode     | /Alternar pestañas en la pantalla local/ | SPC t C               |
| centaur-tabs-forward        | /Pestaña siguiente/                      | g <right> or g t      |
| centaur-tabs-backward       | /Pestaña previa/                         | g <left> or g T       |
| centaur-tabs-forward-group  | /Grupo de pestañas siguiente/            | g <down>              |
| centaur-tabs-backward-group | /Grupo de pestañas previo/               | g <up>                |

#+begin_src emacs-lisp
(setq centaur-tabs-set-bar 'over
      centaur-tabs-set-icons t
      centaur-tabs-gray-out-icons 'buffer
      centaur-tabs-height 24
      centaur-tabs-set-modified-marker t
      centaur-tabs-style "bar"
      centaur-tabs-modified-marker "•")
(map! :leader
      :desc "Alternar pestañas globalmente" "t c" #'centaur-tabs-mode
      :desc "Alternar pestañas en la pantalla local" "t C" #'centaur-tabs-local-mode)
; Aca usas las flechas para nagevar las pestañas. Flecha derecha (right) e izquierda (left) son para ir a la pestaña siguiente y previa, respectivamente. Abajo (down) y arriba (up) son para alternar entre grupos de pestaña (siguiente y previa, respectivamente).
(evil-define-key 'normal centaur-tabs-mode-map (kbd "g <right>") 'centaur-tabs-forward
                                               (kbd "g <left>")  'centaur-tabs-backward
                                               (kbd "g <down>")  'centaur-tabs-forward-group
                                               (kbd "g <up>")    'centaur-tabs-backward-group)
#+end_src

* CLIPPY
Vuelve el pelotudo de Microsoft Office! Este monito nos ayudara describiendo funciones y variables cuando usamos las teclas correspondientes mientras esta el cursor arriba de lo que queremos explicado. Usando esto, se nos va a aparecer una pequeña ventana con documentación y el grande y famoso Clippy en carne y hueso.

| COMANDO                  | DESCRIPCIÓN                                 | COMBINACIÓN DE TECLAS |
|--------------------------+---------------------------------------------+-----------------------|
| clippy-describe-function | /Clippy describe una función bajo el cursor/  | SPC c h f             |
| clippy-describe-variable | /Clippy describe una variable bajo el cursor/ | SPC c h v             |

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("c h" . "Invocar a Clippy")
       :desc "Clippy describe una función bajo el cursor" "f" #'clippy-describe-function
       :desc "Clippy describe una variable bajo el cursor" "v" #'clippy-describe-variable))
#+end_src

* TABLERO

** Configuración del Tablero
El tablero de Emacs es lo primero que vez cuando lo abrís. Te muestra tus archivos recientes, tus marcadores, tus agendas, configuraciones y la imagen (o ASCII) que has elegido para aparecer en el mismo. DOOM Emacs ya vieno con su propio tablero pre-configurado, que esta bastante bueno, asi que si queres podes comentar esta sección del documeto y seguir adelante.

#+begin_src emacs-lisp
(add-hook! '+doom-dashboard-functions :append
  (insert "\n" (+doom-dashboard--center +doom-dashboard--width "Salve Regina")))
(defun title ()
  (let* ((banner '(" ████████╗ █████╗ ██████╗ ██████╗  ██████╗ ██╗     ██╗███╗   ██╗ ██████╗ █████╗  "
                   " ╚══██╔══╝██╔══██╗██╔══██╗██╔══██╗██╔═══██╗██║     ██║████╗  ██║██╔════╝██╔══██╗ "
                   "    ██║   ███████║██████╔╝██████╔╝██║   ██║██║     ██║██╔██╗ ██║███████╗╚██████║ "
                   "    ██║   ██╔══██║██╔══██╗██╔══██╗██║   ██║██║     ██║██║╚██╗██║██╔═══██╗╚═══██║ "
                   "    ██║   ██║  ██║██║  ██║██████╔╝╚██████╔╝███████╗██║██║ ╚████║╚██████╔╝█████╔╝ "
                   "    ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝  ╚═════╝ ╚══════╝╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚════╝  "
                   "                               ~~  Avra Kehdabra ~~                              "))

         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat line (make-string (max 0 (- longest-line (length line))) 32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(setq +doom-dashboard-ascii-banner-fn #'title)

; Aca remuevo algunos botones, ya sea porque no los uso o porque los abro de otra manera.
(assoc-delete-all "Reload last session" +doom-dashboard-menu-sections)
(assoc-delete-all "Open documentation" +doom-dashboard-menu-sections)
(assoc-delete-all "Open org-agenda" +doom-dashboard-menu-sections)
#+end_src

** Tablero en Emacsclient
Esto es para que el cliente de emacs, si esta activado, siempre se abra en el tablero.

#+begin_src emacs-lisp
(setq doom-fallback-buffer-name "*dashboard*")
#+end_src

* DIRED
Dired es el gestor de archivos de Emacs. A seguir están la combinaciones de teclas de dired, incluyendo las usadas para ver imágenes en el mismo.

** Combinación de Teclas para Abrir Dired
| COMANDO    | DESCRIPCIÓN                          | COMBINACIÓN DE TECLAS |
|------------+--------------------------------------+-----------------------|
| dired      | /Abrir gestor de archivos dired/       | SPC d d               |
| dired-jump | /Saltar al directorio actual en dired/ | SPC d j               |

** Combinaciones de Teclas Dentro de Dired

*** Comandos básicos de dired
| COMANDO                | DESCRIPCIÓN                                              | COMBINACIÓN DE TECLAS |
|------------------------+----------------------------------------------------------+-----------------------|
| dired-view-file        | /Ver el archivo en dired/                                  | SPC d v               |
| dired-up-directory     | /Subir en el árbol de directorios/                         | h                     |
| dired-find-file        | /Bajar en el árbol de directorios (o abrir si es archivo)/ | l                     |
| dired-next-line        | Bajar a la siguiente línea                               | j                     |
| dired-previous-line    | Subir a la línea anterior                                | k                     |
| dired-mark             | Marcar archivo en el punto                               | m                     |
| dired-unmark           | Desmarcar archivo en el punto                            | u                     |
| dired-do-copy          | Copiar archivo actual o archivos marcados                | C                     |
| dired-do-rename        | Renombrar archivo actual o archivos marcados             | R                     |
| dired-hide-details     | Activar/desactivar listado detallado                     | (                     |
| dired-git-info-mode    | Activar/desactivar información de git                    | )                     |
| dired-create-directory | Crear nuevo directorio vació                             | +                     |
| dired-diff             | Comparar archivo en el punto con otro                    | =                     |
| dired-subtree-toggle   | Alternar visualización del subárbol en el punto          | TAB                   |

*** Comandos de dired usando regex

| COMANDO                 | DESCRIPCIÓN                            | COMBINACIÓN DE TECLAS |
|-------------------------+----------------------------------------+-----------------------|
| dired-mark-files-regexp | Marcar archivos usando regex           | % m                   |
| dired-do-copy-regexp    | Copiar archivos usando regex           | % C                   |
| dired-do-rename-regexp  | Renombrar archivos usando regex        | % R                   |
| dired-mark-files-regexp | Marcar todos los archivos usando regex | * %                   |

*** Permisos y propiedad de archivos

| COMANDO         | DESCRIPCIÓN                                      | COMBINACIÓN DE TECLAS |
|-----------------+--------------------------------------------------+-----------------------|
| dired-do-chgrp  | Cambiar el grupo de los archivos marcados        | g G                   |
| dired-do-chmod  | Cambiar el modo de los archivos marcados         | M                     |
| dired-do-chown  | Cambiar el propietario de los archivos marcados  | O                     |
| dired-do-rename | Renombrar archivos o todos los archivos marcados | R                     |

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Abrir dired" "d" #'dired
       :desc "Dired saltar al actual" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Vista previa de image peep-dired" "d p" #'peep-dired
        :desc "Dired ver archivo" "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; usar dired-find-file en vez de dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill
  (kbd "Z") 'dired-do-compress
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-do-kill-lines
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
;; Obtener iconos para dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; Con el plugin dired-open, podes lanzar programas externos para ciertas extensiones
;; Por ejemplo, todos los .png se abren en 'sxiv' y todos los .mp4 en 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

** Combinaciones de Teclado con Pee-Dired Activado
Si peep-dired esta activado, tendrás vistas previas de las imágenes a medida que subes y bajas con 'j' y 'k'

| COMANDO              | DESCRIPCIÓN                               | COMBINACIÓN DE TECLAS |
|----------------------+-------------------------------------------+-----------------------|
| peep-dired           | /Alternar vistas previas en dired/          | SPC d p               |
| peep-dired-next-file | /Ir al siguiente archivo en modo pee-dired/ | j                     |
| peep-dired-prev-file | /Ir al archivo anterior en modo pee-dired/  | k                     |

#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+END_SRC

* TEMAS DOOM
Establece el tema de DOOM Emacs. A mi, personalmente, me gusta doom-dracula, pero vos cámbialo si queres. Usa 'SPC h t' para probar otros temas

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-dracula)
(map! :leader
      :desc "Load new theme" "h t" #'counsel-load-theme)
#+END_SRC

* EMOJIS
Emojify mostrar emojis en Emacs.

#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src

* EVALUAR EXPRESIONES ELISP
Cambiando algunas combinaciones de sus valores por defecto para que encajen mejor con DOOM Emacs  Por defecto, DOOM Emacs no usa 'SPC e' para nada, así que se usa el formato 'SPC e' más 'tecla' para estos (también se usa 'SPC e' para los comandos 'eww').

| COMANDO         | DESCRIPCIÓN                                       | COMBINACIÓN DE TECLAS |
|-----------------+---------------------------------------------------+-----------------------|
| eval-buffer     | /Evaluar elisp en el buffer/                        | SPC e b               |
| eval-defun      | /Evaluar el defun que contiene o después del punto/ | SPC e d               |
| eval-expression | /Evaluar una expresión elisp/                       | SPC e e               |
| eval-last-sexp  | /Evaluar expresión elisp antes del punto/           | SPC e l               |
| eval-region     | /Evaluar elisp en la región/                        | SPC e r               |

#+Begin_src emacs-lisp
(map! :leader
      (:prefix ("e". "evaluate/ERC/EWW")
       :desc "Evaluar elisp en el buffer" "b" #'eval-buffer
       :desc "Evaluar defun" "d" #'eval-defun
       :desc "Evaluar expresión elisp" "e" #'eval-expression
       :desc "Evaluar ultima sexpression" "l" #'eval-last-sexp
       :desc "Evaluar elisp en la region" "r" #'eval-region))
#+END_SRC

* TIPO DE FUENTE TIPOGRÁFICA
Configuración relacionada con el tipo de fuente tipográfica usada dentro de DOOM Emacs:
+ 'doom-font' -- fuente monoespaciada estándar que es usada para la mayoría de las cosas en Emacs.
+ 'doom-variable-pitch-font' -- fuente variable usada que es útil para algunos plugins de Emacs.
+ 'doom-big-font' -- usado en doom-big-font-mode; útil para presentaciones
+ 'font-lock-comment-face' -- para comentarios.
+ 'font-lock-keyword-face' -- elisp. para palabras clave con significado especial como 'setq' en elisp

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 14)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :size 14)
      doom-big-font (font-spec :family "JetBrains Mono" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+END_SRC


* INSERTAR FECHA
Algunas funciones para insertar fechas. La función 'insert-todays-date' puede usarse de tres maneras diferentes: (1) sólo la combinación de teclas sin el prefijo de argumento universal, (2) con un prefijo de argumento universal, o (3) con dos prefijos de argumento universal. El prefijo de argumento universal es 'SPC-u' en DOOM Emacs (C-u en Emacs normal). La función 'insert-any-date' sólo da salida a un formato, que es el mismo formato que 'insert-todays-date' sin prefijo.

| COMANDO               | EJEMPLO DE RESULTADO      | COMBINACION DE TECLAS |
|-----------------------+---------------------------+-----------------------|
| dt/insert-todays-date | Viernes, Octubre 19, 2021 | SPC i d t             |
| dt/insert-todays-date | 11-19-2021                | SPC u SPC i d t       |
| dt/insert-todays-date | 2021-11-19                | SPC u SPC u SPC i d t |
| dt/insert-any-date    | Viernes, Octubre 19, 2021 | SPC i d a             |

#+begin_src emacs-lisp
(defun dt/insert-todays-date (prefix)
  (interactive "P")
  (let ((format (cond
                 ((not prefix) "%A, %B %d, %Y")
                 ((equal prefix '(4)) "%m-%d-%Y")
                 ((equal prefix '(16)) "%Y-%m-%d"))))
    (insert (format-time-string format))))

(require 'calendar)
(defun dt/insert-any-date (date)
  "Insert DATE using the current locale."
  (interactive (list (calendar-read-date)))
  (insert (calendar-date-string date)))

(map! :leader
      (:prefix ("i d" . "Insertar fecha")
        :desc "Insertar cualquier fecha" "a" #'dt/insert-any-date
        :desc "Insertar fecha de hoy" "t" #'dt/insert-todays-date))
#+end_src

* IVY
Ivy es el macanismo generico de auto-completacion para Emacs.

** IVY-POSFRAME
Ivy-posframe es una extension de ivy,que deja a ivy usar posframa para mostrar su menu de candidatos. Algunos de los ajustes a continuacion incluyen:
+ ivy-posframe-display-functions-alist -- establece la posición de la pantalla para programas específicos
+ ivy-posframe-height-alist -- establece la altura de la lista mostrada para programas específicos

Funciones disponibles (posiciones) para 'ivy-posframe-display-functions-alist'
+ ivy-posframe-display-at-frame-center
+ ivy-posframe-display-at-window-center
+ ivy-posframe-display-at-frame-bottom-left
+ ivy-posframe-display-at-window-bottom-left
+ ivy-posframe-display-at-frame-bottom-window-center
+ ivy-posframe-display-at-point
+ ivy-posframe-display-at-frame-top-center

=NOTE:= Si el ajuste para 'ivy-postframe-display' esta puesto en 'nil' (falso), todo lo que es puesto para 'ivy-display-function-fallback' simplemente se devolvera a su posición normal en DOOM Emacs (en el divisor bajo). Sin embargo, si esta puesto en 't' (verdadero), entonces la posicion de emergecia sera centrada.

#+BEGIN_SRC emacs-lisp
(setq ivy-posframe-display-functions-alist
      '((swiper                     . ivy-posframe-display-at-point)
        (complete-symbol            . ivy-posframe-display-at-point)
        (counsel-M-x                . ivy-display-function-fallback)
        (counsel-esh-history        . ivy-posframe-display-at-window-center)
        (counsel-describe-function  . ivy-display-function-fallback)
        (counsel-describe-variable  . ivy-display-function-fallback)
        (counsel-find-file          . ivy-display-function-fallback)
        (counsel-recentf            . ivy-display-function-fallback)
        (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
        (dmenu                      . ivy-posframe-display-at-frame-top-center)
        (nil                        . ivy-posframe-display))
      ivy-posframe-height-alist
      '((swiper . 20)
        (dmenu . 20)
        (t . 10)))
(ivy-posframe-mode 1) ; 1 abilita posframe-mode, 0 lo desabilita.
#+END_SRC

** IVY KEYBINDINGS
Por defecto, DOOM Emacs no usa 'SPC v', asi que es formato usado qui sera 'SPC v' mas 'tecla'

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("v" . "Ivy")
       :desc "Ivy empuje vista" "v p" #'ivy-push-view
       :desc "Ivy cambiar vista" "v s" #'ivy-switch-view))
#+END_SRC

* CONFUGRACION DE LINEAS
La línea de comentario esta puesta en 'SPC TAB TAB', que es una combinación de teclas bastante cómoda para varios teclados. La combinación de teclas estándar de Emacs para la línea de comentario es 'C-x C-;'. Las otras combinaciones de teclas son para comandos que activan/desactivan varios ajustes relacionados con la línea. DOOM Emacs usa 'SPC t' para los comandos "toggle", así que usamos 'SPC t' más 'tecla' para esas combinaciones. Aqui tambien se activa la opcion de numero de linea relativo.

| COMANDO                  | DESCRIPCION                                        | COMBINACION DE TECLAS |
|--------------------------+----------------------------------------------------+-----------------------|
| comment-line             | /Comentar o descomentar líneas/                      | SPC TAB TAB           |
| hl-line-mode             | /Alternar el resaltado de líneas en el marco actual/ | SPC t h               |
| global-hl-line-mode      | /Alternar el resaltado de líneas globalmente/        | SPC t H               |
| doom/toggle-line-numbers | /Alternar numeros de línea/                          | SPC t l               |
| toggle-truncate-lines    | /Alternar truncamiento de línea/                     | SPC t t               |

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
(map! :leader
      :desc "Comentar o descomentar líneas" "TAB TAB" #'comment-line
      (:prefix ("t" . "alternar")
       :desc "Alternar numero de línea" "l" #'doom/toggle-line-numbers
       :desc "Alternar el resaltado de líneas en el marco actual" "h" #'hl-line-mode
       :desc "Alternar el resaltado de líneas globalmente" "H" #'global-hl-line-mode
       :desc "Alternar truncamiento de línea" "t" #'toggle-truncate-lines))
#+END_SRC

* MINIMAPA
Un minimapa en la barra lateral que muestra una version pequeña deñ buffer actual ya sea a la izquierda o derecha. Resalta la region actual y actualiza su posicion automaticamente. Este minimapa no funciona en documentos Org.

| COMANDO      | DESCRIPCION            | COMBINACION DE TECLAS |
|--------------+------------------------+-----------------------|
| minimap-mode | /Alternar modo-minimapa/ | SPC t m               |

#+begin_src emacs-lisp
(setq minimap-window-location 'right)
(map! :leader
      (:prefix ("t" . "alternar")
       :desc "Alternar modo-minimapa" "m" #'minimap-mode))
#+end_src

* LINEA DE MODOS
La linea de modos es la barra de estado que aparece en la parte inferior de la ventana de Emacs. Para mas informacion en lo que esta disponible para la linea de modos en DOOM, vease: https://github.com/seagle0128/doom-modeline

#+begin_src emacs-lisp
(set-face-attribute 'mode-line nil :font "Ubuntu Mono-13")
(setq doom-modeline-height 30     ;; ajusta la altura de la linea de modos
      doom-modeline-bar-width 5   ;; ajusta el ancho de la barra derecha
      doom-modeline-persp-name t  ;; añade nombre perspectivo a la linea de modos
      doom-modeline-persp-icon t) ;; añade un icono de carpeta al lado del nombre persp
#+end_src

* SOPORTE PARA RATON
Añade soporte para el raton en version de terminal de Emacs

#+begin_src emacs-lisp
(xterm-mouse-mode 1)
#+end_src

* NEOTREE
Neotree es usa visualizador de archivos en arbol. Cuando lo abris, salta directamente al archivo actual gracias a neo-smart-open. La opcion 'neo-window-fixed-size' hace que el ancho de neotree sea ajustable. DOOM Emacs no tiene combinacion de teclas nativa para neotree. Dado que 'SPC t' se usa para comandos de alternacion, 'SPC t n' sera usado para alternar neotree.

| COMANDO        | DESCRIPCION                 | COMBINACION DE TECLAS |
|----------------+-----------------------------+-----------------------|
| neotree-toggle | /Alternar neotree/            | SPC t n               |
| neotree- dir   | /Abrir directorio en neotree/ | SPC d n               |

#+BEGIN_SRC emacs-lisp
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil))
(after! doom-themes
  (setq doom-neotree-enable-variable-pitch t))
(map! :leader
      :desc "Alternar neotree" "t n" #'neotree-toggle
      :desc "Abrir directorio en neotree" "d n" #'neotree-dir)
#+END_SRC

* ABRIR ARCHIVOS ESPECIFICOS
Combinaciones de teclas para abrir una variedad de archivos comunmente editados con facilidad con el comando find-file, un buscador de archivos interactivo abrido con 'C-x C-f' en Emacs normal, o 'SPC f f' en DOOM Emacs.

| CAMINO AL ARCHIVO        | DESCRIPCION              | COMBINACION DE TECLAS |
|--------------------------+--------------------------+-----------------------|
| ~/Org/agenda.org         | /Editar archivo de agenda/ | SPC = a               |
| ~/.doom.d/config.org     | /Editar doom config.org/   | SPC = c               |
| ~/.doom.d/init.el        | /Editar doom init.el/      | SPC = i               |
| ~/.doom.d/packages.el    | /Editar doom packages.el/  | SPC = p               |
| ~/.doom.d/eshell/aliases | /Editar aliases de eshell/ | SPC = e a             |
| ~/.doom.d/eshell/profile | /Editar perfil de eshell/  | SPC = e p             |

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("=" . "abrir archivo")
       :desc "Editar archivo de agenda" "a" #'(lambda () (interactive) (find-file "~/Org/agenda.org"))
       :desc "Editar doom config.org" "c" #'(lambda () (interactive) (find-file "~/.doom.d/config.org"))
       :desc "Editar doom init.el" "i" #'(lambda () (interactive) (find-file "~/.doom.d/init.el"))
       :desc "Editar doom packages.el" "p" #'(lambda () (interactive) (find-file "~/.doom.d/packages.el"))))
(map! :leader
      (:prefix ("= e" . "abrir archivos de eshell")
       :desc "Editar aliases de eshell" "a" #'(lambda () (interactive) (find-file "~/.doom.d/eshell/aliases"))
       :desc "Editar perfil de eshell" "p" #'(lambda () (interactive) (find-file "~/.doom.d/eshell/profile"))))
#+END_SRC

* MODO ORG
Configuracion generales de Org. Usa 'after! org' para evitar que la configuracion se elimine por la de defecto en DOOM. Hace uso de org-journal, org-superstar y org-roam (+journal + pretty +roam2 en init.el).

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Org babel tangle" "m B" #'org-babel-tangle)
(after! org
  (setq org-directory "~/Org/"
        org-agenda-files '("~/Org/agenda.org")
        org-default-notes-file (expand-file-name "notas.org" org-directory)
        org-ellipsis " ▼ "
        org-superstar-headline-bullets-list '("❂" "❁" "❀" "✿" "✾" "✽" "✢")
        org-superstar-itembullet-alist '((?+ . ?➤) (?- . ?✦)) ; cambia los simbolos +/- en las listas de items
        org-log-done 'time
        org-hide-emphasis-markers t
        ;; ej. de org-link-abbrev-alist en accion
        ;; [[arch-wiki:Nombre_de_Pagina][Descripcion]]
        org-link-abbrev-alist    ; Esto sobrescribe el org-link-abbrev-list por defecto de DOOM
          '(("google" . "http://www.google.com/search?q=")
            ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
            ("ddg" . "https://duckduckgo.com/?q=")
            ("wiki" . "https://en.wikipedia.org/wiki/"))
        org-table-convert-region-max-lines 20000
        org-todo-keywords        ; Esto sobrescribe los valores por defecto de org-todo-keywords en DOOM
          '((sequence
             "TODO(t)"           ; Una tarea para completar
             "BLOG(b)"           ; Tarea de escritura de blog
             "GYM(g)"            ; Cosas para hacer en el gimnasio
             "PROJ(p)"           ; Un projecto que continene otras tareas
             "VIDEO(v)"          ; Tareas de video
             "WAIT(w)"           ; Algo esta retrasando la tarea
             "|"                 ; Simbolo necesario para separar estados "activos" de estados "inactivos"
             "DONE(d)"           ; La tarea ha sido completada
             "CANCELLED(c)" )))) ; La tarea ha sido cancelada
#+END_SRC

** Org-export
Necesitamos ox-man para "Org eXporting" para manegar formatos y ox-gemini para exportar a gemtext (para el protocolo gemini).

#+BEGIN_SRC emacs-lisp
(use-package ox-man)
(use-package ox-gemini)
#+END_SRC

** Org-journal
#+begin_src emacs-lisp
(setq org-journal-dir "~/Org/diario/"
      org-journal-date-prefix "* "
      org-journal-time-prefix "** "
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org")
#+end_src

** Org-auto-tangle
=org-auto-tangle= te permite añadir la opcion =#+auto_tangle: t= en tu documento Org para que se enmarañe automaticamente cuando guardas en documento.

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src

* MODO ARCOIRIS
El modo arcoiris te permite visualizar el color actual de cualquier valor de color hex. Esto lo hace global (excepto en org-agenda-mode porque se rompe todo).

#+begin_src emacs-lisp
(define-globalized-minor-mode global-rainbow-mode rainbow-mode
  (lambda ()
    (when (not (memq major-mode
                (list 'org-agenda-mode)))
     (rainbow-mode 1))))
(global-rainbow-mode 1 )
#+end_src

* REGISTROS
Los registros de Emacs son compartimentos en los que puedes guardar texto, rectángulos y posiciones para su uso posterior. Una vez que guardas un texto o un rectángulo en un registro, puedes copiarlo en el buffer una o varias veces; una vez que guardas una posición en un registro, puedes volver a esa posición una o varias veces. Las combinaciones de teclas por defecto de GNU Emacs para estos comandos (con la excepción de counsel-register) implican usar 'C-x r' seguido de una o más teclas. Para hacerlo un poco más amigable para el usuario, y al usar DOOM Emacs, reemplazamos la parte de 'C-x r' con 'SPC r'.

| COMANDO                          | DESCRIPCION                         | COMBINACION DE TECLAS |
|----------------------------------+-------------------------------------+-----------------------|
| copy-to-register                 | /Copiar al registro/                  | SPC r c               |
| frameset-to-register             | /Frameset a registro/                 | SPC r f               |
| insert-register                  | /Insertar contenidos del registro/    | SPC r i               |
| jump-to-register                 | /Saltar al registro/                  | SPC r j               |
| list-registers                   | /Listar registros/                    | SPC r l               |
| number-to-register               | /Numero a registro/                   | SPC r n               |
| counsel-register                 | /Elejir interactivamente un registro/ | SPC r r               |
| view-register                    | /Ver un registro/                     | SPC r v               |
| window-configuration-to-register | /COnfiguracion de ventana a register/ | SPC r w               |
| increment-register               | /Incrementar registro/                | SPC r +               |
| point-to-register                | /Apuntar a registro/                  | SPC r SPC             |

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("r" . "registros")
       :desc "Copiar al registro" "c" #'copy-to-register
       :desc "Frameset a registro" "f" #'frameset-to-register
       :desc "Insertar contenidos del registro" "i" #'insert-register
       :desc "Saltar a registro" "j" #'jump-to-register
       :desc "Listar registros" "l" #'list-registers
       :desc "Numero a registro" "n" #'number-to-register
       :desc "Elehjir interactivamente un registro" "r" #'counsel-register
       :desc "Ver un registro" "v" #'view-register
       :desc "Configuracion de ventana a registro" "w" #'window-configuration-to-register
       :desc "Incrementar registro" "+" #'increment-register
       :desc "Apuntar a registro" "SPC" #'point-to-register))
#+END_SRC

* SHELLS
Configuraciones para los varios shells y emuladores de terminal dentro de Emacs.
+ 'shell-file-name' -- fija la shell para sel usada en M-x shell, M-x term, M-x ansi-term y M-x vterm.
+ 'eshell-aliases-file' -- fija un archivo de aliases para la shell

#+BEGIN_SRC emacs-lisp
(setq shell-file-name "/bin/sh"
      vterm-max-scrollback 5000)
(setq eshell-rc-script "~/.doom.d/eshell/profile"
      eshell-aliases-file "~/.doom.d/eshell/aliases"
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("zsh" "bash" "fish" "htop" "ssh" "top"))
(map! :leader
      :desc "Eshell" "e s" #'eshell
      :desc "Alternar eshell emergente" "e t" #'+eshell/toggle
      :desc "Historial eshell" "e h" #'counsel-esh-history
      :desc "Alternar vterm emergente" "v t" #'+vterm/toggle)
#+END_SRC

* SPLITS
Configuracion para que se abran por defecto a la derecha usando 'prefer-horizontal-split'. Estableze una combinaci de teclas para 'clone-indirect-buffer-other-window' para cuando se quiere tener el mismo documento en dos splits. El texto del buffer indirecto es siempre idéntico al de su buffer base; los cambios realizados al editar cualquiera de ellos son visibles inmediatamente en el otro.  Pero en todos los demás aspectos, el buffer indirecto y su buffer base están completamente separados.

#+BEGIN_SRC emacs-lisp
(defun prefer-horizontal-split ()
  (set-variable 'split-height-threshold nil t)
  (set-variable 'split-width-threshold 40 t)) ; bajar como se vaya necesitando
(add-hook 'markdown-mode-hook 'prefer-horizontal-split)
(map! :leader
      :desc "Clonar buffer indirecto otra ventana" "b c" #'clone-indirect-buffer-other-window)
#+END_SRC

* MODO WINNER
El modo winner ha estado en Emacs desde la version 20. Es un modo global y, cuando activado, permite "deshacer" (y "rehacer") cambios en la configuracion de la ventana con las combinaciones 'SPC w <izquierda>' y 'SPC w <derecha>'.

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("w" . "window")
       :desc "Winner rehacer" "<derecha>" #'winner-redo
       :desc "Winner deshacer" "<izquierda>" #'winner-undo))
#+END_SRC

* ZAP-TO-CHAR
Emacs proporciona un comando 'zap-to-char' que mata desde el punto actual a un carácter. Está ligado a 'M-z' en Emacs estándar, pero como DOOM Emacs usa 'SPC' como su tecla líder y no tiene 'SPC z' ligado a nada, asi que tiene sentido usarlo para 'zap-to-char'. Tenga en cuenta que 'zap-to-char' puede utilizarse con el argumento universal 'SPC u' para modificar su comportamiento. En la siguiente tabla se muestran ejemplos de uso de 'zap-to-char':

| COMBINACION DE TECLAS     | QUE HACE                                                            |
|---------------------------+---------------------------------------------------------------------|
| SPC z e                   | borra todos los caracteres hasta la siguiente aparición de'e'       |
| SPC u 2 SPC z e           | borra todos los caracteres hasta la segunda aparición de'e'         |
| SPC u - SPC z e           | borra todos los caracteres hasta la previa aparición de 'e'         |
| SPC u - 2 SPC z e         | borra todos los caracteres hasta la segunda previa aparición de 'e' |
| SPC u 1 0 0 SPC u SPC z e | borra todos los caracteres hasta la 100ª aparición de 'e'           |

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Zap to char" "z" #'zap-to-char
      :desc "Zap up to char" "Z" #'zap-up-to-char)
#+END_SRC
